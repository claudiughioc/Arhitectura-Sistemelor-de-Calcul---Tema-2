GHIOC CONSTANTIN CLAUDIU 331CB


            TEMA 2 ASC
            IMPLEMENTAREA OPERATIEI DGBMV DIN BLAS

CONTENTS:
1.  ENUNT
2.  UTILIZARE
3.  IMPLEMENTARE
4.  GRAFICE
5.  CONTINUT ARHIVA




1.  ENUNT
    Se cere implementare operatiei dgbmv din BLAS intr-un program realizat in limbajul C. Operatia realizeaza produsul general intre o matrice si un vector pentru numere in virgula mobila, dubla precizie. mai precis operatia implementeaza:
    y := alpha * A * x + beta * y


2.  UTILIZARE
    ./run.sh
    ... asteptare rezultate in folderul out
    ./deseneaza_grafice.sh                      --->    foloseste rezultatele de la sfarsitul executiei din folderul out
    [optional   ./deseneaza_grafice_arhiva.s]   --->    foloseste rezultatele obtinute anterior din folderul arhiva
    
    Pentru a trimite joburi pe cele trei cozi, se executa doar scriptul run.sh. Acesta incarca modulele necesare, compileaza fisierul main.c pentru toate cele trei compilatoare (gcc, suncc si icc) cu flaguri si fara flaguri de optimizare, obtinandu-se astfel 6 executabile. Dupa compilare scriptul sterge joburile active ale userului meu (constantin.ghioc) si executa mprun.sh pentru fiecare tip de arhitectura: Opteron, Quad si Nehalem. La un apel mprun.sh pe o arhitectura se apeleaza scriptul
    exec_script.sh care pentru fiecare compilator pe rand, executa programul cu si fara flaguri. Dupa terminarea executiei pe cozi, in directorul out vor fi trei fisiere .o: Nehalem.o*, Opteron.o* si Quad.o*. Fiecare dintre aceste contine 12 linii cu urmatoarea semnificatie: fiecare 4 linii contin output de la fiecare compilator (gcc, suncc si icc), iar dintre fiecare grup de 4 linii primele 3 sunt rezultate ale executiei programului fara flaguri (varianta simpla, optimizata si blas) iar
lina 4 reprezinta output (timpul de executie in milisecunde) pentru varianta cu flaguri la compilare pentru implementarea banala. Am ales sa obtin timpii in acest format pentru a le parsa usor la constructia graficelor.
    Scriptul deseneaza_grafice.sh depinde de prezenta directoarelor out si data in folderul curent. Folderul data contine un sript de parsare (parse.sh) si 3 scripturi pentru desenare grafice. Astfel deseneaza_garfice.sh copie fisierele .o din out in directorul data, ruleaza scriptul parse (care imparte cele trei fisiere de iesire in 9 fisiere ce vor contine cate un set de date per arhitectura-compilator). Cele 9 fisiere sunt folosite de 3 scripturi de desenare grafice. Se apeleaza
    astfel gnuplot pe fiecare fisier *.gnu din data (specific arhitecturii), iar la final se sterg cele 9 fisiere si se muta rezultatele in folderul curent. Se obtin trei grafice.ps.

    In ultima zi inaintea deadline-ului nu am mai reusit sa obtin rezultate in fisierele .o, cozile fiind in majoritatea timpului blocate. Pentru siguranta, am adaugat un director arhiva cu 3 fisiere .o pe care le-am obtinut anterior. Pentru obtinere grafice se va rula scriptul ./deseneaza_grafice_arhiva.sh, care urmeaza aceiasi pasi ca in scriptul anterior.
    


3.  IMPLEMENTARE
    Pentru varianta simpla a functiei dgbmv am urmat codul din Blas in Fortran al acestei functii si l-am transpus in C. Am scris astfel functia dgbmv care primeste aproape toti parametrii pe care ii primeste si cblas_dgbmv, cu exceptia primilor doi. Aceasta functie primeste un vector de tip double* care este reprezentarea in band storage, column major a matricei A. Pe langa asta, am mai scris o varianta imbunatita a functiei dgbmv, in care singurele diferente se observa
    la accesul la elementele vectorilor A, x si y. Astfel, pentru a parcurge un vector nu mai accesez in forma x[i], ci consider un pointer la o valoare initiala, care va creste cu un pas, corespunzator fiecarei bucle.
    In main, pentru a obtine timpi mari de rulare am considerat numar de benzi cat mai mic (kl, ku 1 sau 0) si dimensiuni ale matricei initiale foarte mari (eu am variat datele intre 100 000 000 si 300 000 000, iar lda = 1) pentru a nu aloca memorie multa. Aloc vectorii A, x si y de dimensiuni lda * n, n * incx respectiv m * incy) si le dau valori aleatoare intre 0 si 100. Pentru vectorul y mai fac inca doua copii pentru a rula in acelasi program cele trei versiuni: simpla, optimizata si
    cblas_dgbmv. Aceste functii sunt apelate daca nu exista flaguri de optimizare la compilatoare (lucuru indicat de variabila flags primita ca argument in lina de comanda), iar daca exista flaguri, se va apela doar implementarea simpla a functiei si se va masura timpul de executie doar pentru ea.
    Astfel la o rulara fara flaguri de optimizare afisez 3 rezultate care reprezinta in aceasta ordine timpul de executie pentru varianta simpla, varianta optimizata si varianta din blas, iar pentru rularea cu flaguri outputul este doar timupul de executie a variantei simple.



4.  GRAFICE
    In urma rularii unuia din scripturile de desenare grafice se obtin trei fisiere .ps care reprezinta comportamentul programului pe fiecare arhitectura (la fiecare compilator). Un fisier .ps contine trei grafice care descriu timpii de executie pentru fiecare compilator (gcc, suncc, icc) prin cele 4 metode de implementare (banala, optimizata, blas, cu flaguri). Se observa astfel ca timpii de executie scad de la implementarea banala, la cea optimizata, implementarile blas si
    cu flaguri, avand aproape aceiasi timpi de executie, cea cu flaguri fiind putin mai rapida. In privinta compilatoarelor am observat ca cel mai bine se comprta icc, apoi gcc, iar mai greu ruleaza programele compilate cu suncc. Din punct de vedere al procesoarelor, in ordinea crescatoare a timpilor de executie se afla Nehalem, Opteron si Quad.


5.  CONTINUT ARHIVA
    Arhiva tema2_Constantin_Ghioc_331CB.zip contine fisierul sursa main.c, Makefile, run.sh, exec_script.sh, scripturile de desenare grafice (deseneaza_grafice.sh si deseneaza_grafice_arhiva.sh) si doua directoare: data ( care contine un script de parsare si 3 scripturi pentru desenare grafice cu gnuplot) si arhiva (cu trei fisiere de iesire per arhitectura obtinute anterior).
